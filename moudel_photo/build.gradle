if (isModule) {
    apply plugin: rootProject.ext.plugin.com_android_library
} else {
    apply plugin: rootProject.ext.plugin.com_android_application
}

android {

    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion

    defaultConfig {

        if (!isModule) {
            applicationId rootProject.ext.appid.model
        }

        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [moduleName: project.getName()]
            }
        }

        buildConfigField(rootProject.ext.config.boolean, rootProject.ext.config.log, String.valueOf(isLog))
        buildConfigField(rootProject.ext.config.boolean, rootProject.ext.config.module, String.valueOf(isModule))

        //配置资源文件
        sourceSets {
            main {
                if (isModule) {
                    manifest.srcFile 'src/main/AndroidManifest.xml'
                    java.srcDirs 'src/main/java'
                } else {
                    //  manifest.srcFile 'src_test/main/AndroidManifest.xml'
                    //  java.srcDirs 'src/main/java', 'src_test/main/java'
                }
            }
        }
    }

    signingConfigs {
        debug {
            v1SigningEnabled true
            v2SigningEnabled true
        }
        release {
            v1SigningEnabled true
            v2SigningEnabled true
        }
    }
    buildTypes {
        release {
            buildConfigField "boolean", "LEO_DEBUG", "false" // 不显示Log
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            buildConfigField "boolean", "LEO_DEBUG", "true" // 显示Log
            minifyEnabled false
            signingConfig signingConfigs.debug  // 编译加速
            ext.alwaysUpdateBuildId = false  // 编译加速
            buildConfigField "long", "BUILD_TIMESTAMP", "000000000"  // 编译加速
        }
    }
    lintOptions {
        disable "ResourceType"
        checkReleaseBuilds false
        abortOnError false
    }
    if (project.hasProperty("devBuild")) {  // 编译加速
        aaptOptions.cruncherEnabled = false  // 编译加速
    }
    dexOptions {          // 编译加速
        javaMaxHeapSize "4g"
        // incremental false
    }
    flavorDimensions "default"  // 编译加速
    productFlavors {  // 编译加速
        development {  // 编译加速
            minSdkVersion 15  // 编译加速
            dimension "default"  // 编译加速
            resConfigs("en", "xxhdpi")  // 编译加速
        }
        production {  // 编译加速
            dimension "default"  // 编译加速
        }
    }
    packagingOptions {
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation rootProject.ext.dependencies.support_appcompat_v7

    implementation project(':router_core')
    implementation project(':router_annotation')
    annotationProcessor project(':router_processor')
}
